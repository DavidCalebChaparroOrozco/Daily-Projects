# Define a function that takes a first name and a last name, and returns the full name in title format.
def get_full_name(first_name, last_name):
    full_name = first_name.title() + " " + last_name.title()
    return full_name

# Print the full name generated by the get_full_name function.
print(get_full_name("David Caleb", "Chaparro Orozco"))

# Define a function that takes a name (str) and an age (int) and returns a string concatenating the name and the age.
def get_name_with_age(name: str, age: int):
    name_with_age = name + " is this old: " + age  # Potential error: age should be converted to str
    return name_with_age

# Print the result of the get_name_with_age function.
print(get_name_with_age("David Caleb","25"))

# Define a function that processes a list of items, printing each one of them.
from typing import List
def process_items(items: List[str]):
    for item in items:
        print(item)

# Call the process_items function with a list of names and print them.
print(process_items(["Bender","Fry","Leela","Eimy"]))

# Define a function that greets a person if a name is provided, otherwise prints "Hello World".
def say_hi(name: str | None = None):
    if name is not None:
        print(f"Hey {name}!")
    else:
        print("Hello World")

# Greet the person named "David Caleb".
print(say_hi("David Caleb"))

# Define a function that greets a person if a name is provided, otherwise prints "Hello, None!".
from typing import Optional
def say_hi(name: Optional[str]):
    print(f"Hello, {name}!")

# Greet the person named "David Caleb".
print(say_hi("David Caleb"))

# Import necessary classes and define a user class with some properties and default values.
from datetime import datetime
from pydantic import BaseModel

class User(BaseModel):
    id: int
    name: str = "David Caleb"
    signup_ts: datetime | None = None
    friends: list[int] = []

# Define external data and create an instance of the User class with that data.
external_data = {
    "id": "123",
    "signup_ts": "2024-04-09 21:31",
    "friends": [1, "2", b"3"],  # Potential error: the third friend might cause type issues
}
user = User(**external_data)

# Print user data and their ID.
print(user)  # Expected to display user data
print(user.id)  # Expected to display user ID

# Define a function that greets a person and takes a name, with an additional metadata.
from typing import Annotated
def say_hello(name: Annotated[str, "this is just metadata"]) -> str:
    return f"Hello {name}"

# Greet the person named "David".
print(say_hello("David"))